// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/encomenda.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EncomendaServiceClient is the client API for EncomendaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncomendaServiceClient interface {
	SendEncomenda(ctx context.Context, in *Encomenda, opts ...grpc.CallOption) (*EncomendaRastreio, error)
}

type encomendaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEncomendaServiceClient(cc grpc.ClientConnInterface) EncomendaServiceClient {
	return &encomendaServiceClient{cc}
}

func (c *encomendaServiceClient) SendEncomenda(ctx context.Context, in *Encomenda, opts ...grpc.CallOption) (*EncomendaRastreio, error) {
	out := new(EncomendaRastreio)
	err := c.cc.Invoke(ctx, "/pb.EncomendaService/SendEncomenda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncomendaServiceServer is the server API for EncomendaService service.
// All implementations must embed UnimplementedEncomendaServiceServer
// for forward compatibility
type EncomendaServiceServer interface {
	SendEncomenda(context.Context, *Encomenda) (*EncomendaRastreio, error)
	mustEmbedUnimplementedEncomendaServiceServer()
}

// UnimplementedEncomendaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEncomendaServiceServer struct {
}

func (UnimplementedEncomendaServiceServer) SendEncomenda(context.Context, *Encomenda) (*EncomendaRastreio, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEncomenda not implemented")
}
func (UnimplementedEncomendaServiceServer) mustEmbedUnimplementedEncomendaServiceServer() {}

// UnsafeEncomendaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncomendaServiceServer will
// result in compilation errors.
type UnsafeEncomendaServiceServer interface {
	mustEmbedUnimplementedEncomendaServiceServer()
}

func RegisterEncomendaServiceServer(s grpc.ServiceRegistrar, srv EncomendaServiceServer) {
	s.RegisterService(&EncomendaService_ServiceDesc, srv)
}

func _EncomendaService_SendEncomenda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Encomenda)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncomendaServiceServer).SendEncomenda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EncomendaService/SendEncomenda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncomendaServiceServer).SendEncomenda(ctx, req.(*Encomenda))
	}
	return interceptor(ctx, in, info, handler)
}

// EncomendaService_ServiceDesc is the grpc.ServiceDesc for EncomendaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EncomendaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.EncomendaService",
	HandlerType: (*EncomendaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEncomenda",
			Handler:    _EncomendaService_SendEncomenda_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/encomenda.proto",
}
